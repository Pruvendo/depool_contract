Definition DePoolContract_Ф_onFailToRecoverStake ( Л_queryId : XInteger64 ) ( Л_elector : XAddress ) : LedgerT ( XErrorValue True XInteger ) := 
 	 
declareLocal Л_optRound :>: ( XMaybe RoundsBase_ι_Round ):= RoundsBase_Ф_fetchRound (! $Л_queryId !) ; 
 
Require2 {{$ Л_optRound ->hasValue , ξ$ InternalErrors_ι_ERROR513 }} ; 
 
declareLocal Л_round :>: RoundsBase_ι_Round := ( $ Л_optRound) ->get ; 
 
Require2 {{ msg_sender () ?== $ Л_round ->> RoundsBase_ι_Round_ι_proxy , ξ$ Errors_ι_IS_NOT_PROXY }} ; 
 
Require2 {{$ Л_elector ?== $ Л_round ->> RoundsBase_ι_Round_ι_elector , ξ$ Errors_ι_IS_NOT_ELECTOR }} ; 
tvm_accept () >> 
 
(↑17 U1! LocalState_ι_onFailToRecoverStake_Л_round := $ Л_round) >> 
 
If! (↑17 D2! LocalState_ι_onFailToRecoverStake_Л_round ^^ RoundsBase_ι_Round_ι_step ?== ξ$ RoundsBase_ι_RoundStepP_ι_WaitingIfValidatorWinElections) then { 
(↑17 U1! LocalState_ι_onFailToRecoverStake_Л_round ^^ RoundsBase_ι_Round_ι_step := ξ$ RoundsBase_ι_RoundStepP_ι_WaitingUnfreeze ) >> 
 $ (xValue I) 
} else { If (↑17 D2! LocalState_ι_onFailToRecoverStake_Л_round ^^ RoundsBase_ι_Round_ι_step ?== ξ$ RoundsBase_ι_RoundStepP_ι_WaitingReward) then { 
↑↑17 U2! LocalState_ι_onFailToRecoverStake_Л_round := DePoolContract_Ф_startRoundCompleting(! ↑17 D2! LocalState_ι_onFailToRecoverStake_Л_round , 
                               ξ$ RoundsBase_ι_CompletionReasonP_ι_ValidatorIsPunished !) >> 
 $ (xValue I) 
} else { 
tvm_revert (! ξ$ InternalErrors_ι_ERROR521  !) 
} } ; 

 
( RoundsBase_Ф_setRound (! $Л_queryId , ↑17 D2! LocalState_ι_onFailToRecoverStake_Л_round !) ).
===== TRANSLATED =====
function onFailToRecoverStake(uint64 queryId, address elector) {
    optional(Round) optRound = fetchRound(queryId);
    require(optRound.hasValue(), InternalErrors.ERROR513);
    Round round = optRound.get();
    require(msg.sender == round.proxy, Errors.IS_NOT_PROXY);
    require(elector == round.elector, Errors.IS_NOT_ELECTOR);
    tvm.accept();
    if (round.step == RoundStep.WaitingIfValidatorWinElections) {
        (round.step = RoundStep.WaitingUnfreeze);
    } else {
        if (round.step == RoundStep.WaitingReward) {
            round = startRoundCompleting(round,
                CompletionReason.ValidatorIsPunished);
        } else {
            revert(InternalErrors.ERROR521);
        }
    }
    (setRound(queryId, round));
}
===== REFERENCE =====
unction onFailToRecoverStake(uint64 queryId, address elector) public override {
        optional(Round) optRound = fetchRound(queryId);
        require(optRound.hasValue(), InternalErrors.ERROR513);
        Round round = optRound.get();
        require(msg.sender == round.proxy, Errors.IS_NOT_PROXY);
        require(elector == round.elector, Errors.IS_NOT_ELECTOR);
        tvm.accept();
        if (round.step == RoundStep.WaitingIfValidatorWinElections) {
             round.step = RoundStep.WaitingUnfreeze;
        } else if (round.step == RoundStep.WaitingReward) {
            round = startRoundCompleting(round, CompletionReason.ValidatorIsPunished);
        } else {
            revert(InternalErrors.ERROR521);
        }
        setRound(queryId, round); } 
===== DIFF =====
- function onFailToRecoverStake(uint64 queryId, address elector) {
? -
+ unction onFailToRecoverStake(uint64 queryId, address elector) public override {
?                                                               ++++++++++++++++
  optional(Round) optRound = fetchRound(queryId);
  require(optRound.hasValue(), InternalErrors.ERROR513);
  Round round = optRound.get();
  require(msg.sender == round.proxy, Errors.IS_NOT_PROXY);
  require(elector == round.elector, Errors.IS_NOT_ELECTOR);
  tvm.accept();
  if (round.step == RoundStep.WaitingIfValidatorWinElections) {
- (round.step = RoundStep.WaitingUnfreeze);
? -                                      -
+ round.step = RoundStep.WaitingUnfreeze;
- } else {
- if (round.step == RoundStep.WaitingReward) {
+ } else if (round.step == RoundStep.WaitingReward) {
? +++++++
  round = startRoundCompleting(round, CompletionReason.ValidatorIsPunished);
  } else {
  revert(InternalErrors.ERROR521);
  }
- }
- (setRound(queryId, round));
? -                        -
+ setRound(queryId, round);
  }