Definition DePoolContract_Ф_withdrawPart' ( Л_withdrawValue : XInteger64 ) 
                     : LedgerT (XErrorValue (XValueValue True) XInteger) := 
                
Require {{ msg_sender () ?!= $ xInt0 , ξ$ Errors_ι_IS_EXT_MSG }} ; 

                 
If!! ( ↑ε12 DePoolContract_ι_m_poolClosed ) 
then { 
 return!!! ( DePoolContract_Ф__sendError (! $ DePool_ι_STATUS_DEPOOL_CLOSED , $ xInt0 !) ) 
 } ; 
               
declareLocal Л_optParticipant :>: (XMaybe (ξ DePoolLib_ι_Participant)) := ParticipantBase_Ф_fetchParticipant (! msg_sender () !) ; 
If! ( !¬ ( $ Л_optParticipant ->hasValue ) ) 
then { 
  return!!! ( DePoolContract_Ф__sendError (! $ DePool_ι_STATUS_NO_PARTICIPANT , $ xInt0 !) )													 
 } ; 
                   
declareLocal Л_participant :>: ξ DePoolLib_ι_Participant := $ Л_optParticipant ->get ; 
                      
U0! Л_participant ^^ DePoolLib_ι_Participant_ι_withdrawValue := $ Л_withdrawValue ; 
                     
(ParticipantBase_Ф__setOrDeleteParticipant (! msg_sender () , $ Л_participant !)) >> 
return!! (DePoolContract_Ф_sendAcceptAndReturnChange () ).
===== TRANSLATED =====
function withdrawPart(uint64 withdrawValue) {
    require(msg.sender != 0, Errors.IS_EXT_MSG);
    if (m_poolClosed) {
        return (_sendError(STATUS_DEPOOL_CLOSED, 0));
    }
    optional(DePoolLib.Participant) optParticipant = fetchParticipant(msg.sender);
    if (!(optParticipant.hasValue())) {
        return (_sendError(STATUS_NO_PARTICIPANT, 0));
    }
    DePoolLib.Participant participant = optParticipant.get();
    participant.withdrawValue = withdrawValue;
    (_setOrDeleteParticipant(msg.sender, participant));
    return (sendAcceptAndReturnChange());
}
===== REFERENCE =====

function withdrawPart (uint64 withdrawValue) public { 
    require(msg.sender != address(0), Errors.IS_EXT_MSG); 
    if (m_poolClosed) { 
      return _sendError(STATUS_DEPOOL_CLOSED, 0); 
    } 
    optional(DePoolLib.Participant) optParticipant = fetchParticipant(msg.sender); 
    if (!optParticipant.hasValue()) { 
      return _sendError(STATUS_NO_PARTICIPANT, 0); 
    } 
    DePoolLib.Participant participant = optParticipant.get(); 
    participant.withdrawValue = withdrawValue; 
    _setOrDeleteParticipant(msg.sender, participant); 
    sendAcceptAndReturnChange();            
  }
===== DIFF =====
- function withdrawPart(uint64 withdrawValue) {
+ function withdrawPart(uint64 withdrawValue) public {
?                                             +++++++
- require(msg.sender != 0, Errors.IS_EXT_MSG);
+ require(msg.sender != address(0), Errors.IS_EXT_MSG);
?                       ++++++++ +
  if (m_poolClosed) {
- return (_sendError(STATUS_DEPOOL_CLOSED, 0));
?        -                                  -
+ return _sendError(STATUS_DEPOOL_CLOSED, 0);
  }
  optional(DePoolLib.Participant) optParticipant = fetchParticipant(msg.sender);
- if (!(optParticipant.hasValue())) {
?      -                          -
+ if (!optParticipant.hasValue()) {
- return (_sendError(STATUS_NO_PARTICIPANT, 0));
?        -                                   -
+ return _sendError(STATUS_NO_PARTICIPANT, 0);
  }
  DePoolLib.Participant participant = optParticipant.get();
  participant.withdrawValue = withdrawValue;
- (_setOrDeleteParticipant(msg.sender, participant));
? -                                                -
+ _setOrDeleteParticipant(msg.sender, participant);
- return (sendAcceptAndReturnChange());
? --------                           -
+ sendAcceptAndReturnChange();
  }