Definition DePoolProxyContract_Ф_recover_stake ( Л_queryId : XInteger64 ) ( Л_elector : XAddress ) : LedgerT ( XErrorValue True XInteger ) := 
 Require2 {{ msg_sender () ?== ↑ε10 DePoolProxyContract_ι_m_dePool , $ DePoolProxyContract_ι_ERROR_IS_NOT_DEPOOL }} ; 
 declareLocal Л_carry :>: XInteger := msg_value () !- ξ$ DePoolLib_ι_PROXY_FEE ; 
 Require {{ tvm_balance () ?>=  $Л_carry !+ ( ξ$ DePoolLib_ι_MIN_PROXY_BALANCE ) , 
        $ DePoolProxyContract_ι_ERROR_BAD_BALANCE }} ; 
 IElector of ( $ Л_elector ) ->sendMessage ( IElector_И_recover_stakeF (!! $ Л_queryId !!) )
                with {|| messageValue ::= msg_value () !- ξ$ DePoolLib_ι_PROXY_FEE ||} .
===== TRANSLATED =====
function recover_stake(uint64 queryId, address elector) {
    require(msg.sender == m_dePool, ERROR_IS_NOT_DEPOOL);
    uint carry = msg.value - DePoolLib.PROXY_FEE;
    require(address(this).balance >= carry + DePoolLib.MIN_PROXY_BALANCE,
        ERROR_BAD_BALANCE);
    IElector(elector).recover_stake {
        value: msg.value - DePoolLib.PROXY_FEE
    }(queryId);
}
===== REFERENCE =====

function recover_stake(uint64 queryId, address elector) public override { 
require(msg.sender == m_dePool, ERROR_IS_NOT_DEPOOL); 

    uint carry = msg.value - DePoolLib.PROXY_FEE; 
    require(address(this).balance >= carry + DePoolLib.MIN_PROXY_BALANCE, ERROR_BAD_BALANCE); 

    IElector(elector).recover_stake{value: msg.value - DePoolLib.PROXY_FEE}(queryId); 
  } 

===== DIFF =====
- function recover_stake(uint64 queryId, address elector) {
+ function recover_stake(uint64 queryId, address elector) public override {
?                                                         ++++++++++++++++
  require(msg.sender == m_dePool, ERROR_IS_NOT_DEPOOL);
  uint carry = msg.value - DePoolLib.PROXY_FEE;
  require(address(this).balance >= carry + DePoolLib.MIN_PROXY_BALANCE, ERROR_BAD_BALANCE);
  IElector(elector).recover_stake {
  value: msg.value - DePoolLib.PROXY_FEE
  }(queryId);
  }