  
Record StakingOwner·AddressP  { A }  := StakingOwner·AddressC  { 
 	StakingOwner·Address·addr : A  ;  
  }  .  
 
 Arguments  StakingOwner·AddressC   [   A   ]    . 
Record  StakingOwnerP { I A }  := StakingOwnerC  { 
 	StakingOwner·TICKTOCK_FEE : I  ;   ( *constant := 1e9* ) 
 	StakingOwner·TIMER_FEE : I  ;   ( *constant := 1e9* ) 
 	StakingOwner·m_stakingPool : A  ; 
 
 	StakingOwner·m_timer : A  ; 
 	StakingOwner·m_timeout : I  ; 
 
 }   . 
 Arguments StakingOwnerC  [  I A  ]   . 
Module StakingOwnerClass (xt: XTypesSig) (sm: StateMonadSig) . 
Definition  StakingOwner·Address  := @StakingOwner·AddressP  XAddress  . 
Definition  StakingOwner  := @StakingOwnerP  XInteger XAddress  . 
Global Instance Struct_StakingOwner·Address : Struct StakingOwner·Address :=  {  
 	 fields :=  [  
 		@existT _ _ _ StakingOwner·Address·addr , 
 	  ]   ;  
 	 ctor := @StakingOwner·AddressC XAddress   
  }   . 
Global Instance Acc_StakingOwner·Address·addr : Accessor StakingOwner·Address·addr :=  {  acc := ·0  }   . 
Global Instance Struct_StakingOwner : Struct StakingOwner :=  { 
 	fields :=  [ 
 		@existT _ _ _ StakingOwner·TICKTOCK_FEE , 
 		@existT _ _ _ StakingOwner·TIMER_FEE , 
 		@existT _ _ _ StakingOwner·m_stakingPool , 
 
 		@existT _ _ _ StakingOwner·m_timer , 
 		@existT _ _ _ StakingOwner·m_timeout , 
 
 	 ]   ;  
 	ctor := @StakingOwnerC I A
 }   . 
Global Instance Acc_StakingOwner·TICKTOCK_FEE : Accessor StakingOwner·TICKTOCK_FEE :=  {  acc := ·0  }   . 
Global Instance Acc_StakingOwner·TIMER_FEE : Accessor StakingOwner·TIMER_FEE :=  {  acc := ·1  }   . 
Global Instance Acc_StakingOwner·m_stakingPool : Accessor StakingOwner·m_stakingPool :=  {  acc := ·2  }   . 
Global Instance Acc_StakingOwner·m_timer : Accessor StakingOwner·m_timer :=  {  acc := ·3  }   . 
Global Instance Acc_StakingOwner·m_timeout : Accessor StakingOwner·m_timeout :=  {  acc := ·4  }   . 
Bind Scope struct_scope with StakingOwner·Address  . 
Instance StakingOwner·Address_default : XDefault StakingOwner·Address :=  {  
 	 default := StakingOwner·AddressC default  
  }   . 
Instance StakingOwner_default : XDefault StakingOwner :=  {  
 	 default := StakingOwnerC default default default default default  
  }   . 
End StakingOwnerClass .


